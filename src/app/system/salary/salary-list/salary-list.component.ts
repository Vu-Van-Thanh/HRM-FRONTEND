import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { NgbModal } from '@ng-bootstrap/ng-bootstrap';
import { SalaryDetailComponent } from '../salary-detail/salary-detail.component';
import { HttpClient } from '@angular/common/http';
import { API_ENDPOINT } from 'src/app/core/constants/endpoint';
import { map, switchMap, tap } from 'rxjs/operators';
import { forkJoin, of } from 'rxjs';
import { ApiResponse } from 'src/app/core/models/kafkaresponse.model';
import { EmployeeDepartmentDTO, SalaryInfo } from '../salary.model';
import { Department } from 'src/app/system/department/department.model';
import { DepartmentService } from '../../department/department.service';

interface Position {
  value: string;
  label: string;
}

@Component({
  selector: 'app-salary-list',
  templateUrl: './salary-list.component.html',
  styleUrls: ['./salary-list.component.scss']
})
export class SalaryListComponent implements OnInit {
  filterForm: FormGroup;
  employees: SalaryInfo[] = [];
  departments: Department[] = [];
  employeeList: EmployeeDepartmentDTO[] = [];
  positions: Position[] = [];
  today = new Date();

  constructor(
    private fb: FormBuilder,
    private departmentService: DepartmentService,
    private http: HttpClient,
    private modalService: NgbModal
  ) {
    this.filterForm = this.fb.group({
      department: [''],
      jobTitle: [''],
      managerId: [''],
      employeeId: ['']
    });

    // Kh·ªüi t·∫°o danh s√°ch v·ªã tr√≠ c√¥ng vi·ªác
    this.positions = [
      { value: 'developer', label: 'L·∫≠p tr√¨nh vi√™n' },
      { value: 'tester', label: 'Ki·ªÉm th·ª≠ vi√™n' },
      { value: 'designer', label: 'Thi·∫øt k·∫ø' },
      { value: 'manager', label: 'Qu·∫£n l√Ω' },
      { value: 'accountant', label: 'K·∫ø to√°n' },
      { value: 'hr', label: 'Nh√¢n s·ª±' },
      { value: 'marketing', label: 'Marketing' }
    ];
  }

  ngOnInit(): void {
    this.loadEmployeeData();
    this.loadDepartments();
  }

  loadEmployeeData(): void {
    const formValues = this.filterForm.value;
    
    const employeeFilter = {
      department: formValues.department || '',
      jobTitle: formValues.jobTitle || '',
      managerId: formValues.managerId || '',
      employeeId: formValues.employeeId || ''
    };

    console.log('üîç √Åp d·ª•ng b·ªô l·ªçc:', employeeFilter);

    // T·∫£i danh s√°ch nh√¢n vi√™n d·ª±a tr√™n b·ªô l·ªçc
    this.http.get<EmployeeDepartmentDTO[]>(API_ENDPOINT.getEmployeeID, { params: employeeFilter })
      .pipe(
        tap(employees => {
          console.log('üìå Danh s√°ch nh√¢n vi√™n sau khi l·ªçc:', employees);
          this.employeeList = employees;
        })
      )
      .subscribe(() => {
        this.loadSalaryData();
      }, error => {
        console.error('‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu nh√¢n vi√™n:', error);
      });
  }

  loadSalaryData(): void {
    if (this.employeeList.length === 0) {
      this.employees = [];
      return;
    }

    const employeeIds = this.employeeList
      .map(emp => emp.employeeID)
      .filter(id => !!id);

    if (employeeIds.length === 0) {
      this.employees = [];
      return;
    }

    const idListParam = employeeIds.join(',');
    this.http.get<SalaryInfo[]>(API_ENDPOINT.getAllSalary + `?employeeIdList=${idListParam}`)
      .pipe(
        tap(salaries => console.log('‚úÖ D·ªØ li·ªáu l∆∞∆°ng:', salaries))
      )
      .subscribe(salaries => {
        this.employees = salaries;
      }, error => {
        console.error('‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu l∆∞∆°ng:', error);
        this.employees = [];
      });
  }

  loadDepartments(): void {
    this.departmentService.getDepartments().subscribe(
      departments => {
        console.log('üìÅ Danh s√°ch ph√≤ng ban:', departments);
        this.departments = departments;
      },
      error => {
        console.error('‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu ph√≤ng ban:', error);
        this.departments = [];
      }
    );
  }

  getEmployeeName(employeeId?: string): string {
    if (!employeeId) return 'N/A';
    const employee = this.employeeList.find(e => e.employeeID === employeeId);
    return employee?.employeeName || 'N/A';
  }

  getDepartmentName(employeeId?: string): string {
    if (!employeeId) return 'N/A';
    const employee = this.employeeList.find(e => e.employeeID === employeeId);
    const department = this.departments.find(d => d.code === employee?.departmentID);
    return department?.name || 'N/A';
  }

  getPosition(employeeId?: string): string {
    if (!employeeId) return 'N/A';
    const employee = this.employeeList.find(e => e.employeeID === employeeId);
    // V√¨ EmployeeDepartmentDTO kh√¥ng c√≥ tr∆∞·ªùng position,
    // ta d√πng map theo jobTitle ho·∫∑c tr·∫£ v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh
    
    // T√¨m trong danh s√°ch positions n·∫øu employeeId c√≥ ch·ª©a jobTitle
    if (employee?.employeeID) {
      const jobTitleMatch = this.positions.find(p => 
        employee.employeeID?.toLowerCase().includes(p.value.toLowerCase())
      );
      if (jobTitleMatch) return jobTitleMatch.label;
    }
    
    // C√≥ th·ªÉ s·ª≠ d·ª•ng departmentName ƒë·ªÉ ph·ªèng ƒëo√°n v·ªã tr√≠
    if (employee?.departmentName) {
      if (employee.departmentName.toLowerCase().includes('k·∫ø to√°n')) return 'K·∫ø to√°n';
      if (employee.departmentName.toLowerCase().includes('it') || 
          employee.departmentName.toLowerCase().includes('k·ªπ thu·∫≠t')) return 'K·ªπ thu·∫≠t';
      if (employee.departmentName.toLowerCase().includes('nh√¢n s·ª±')) return 'Nh√¢n s·ª±';
    }
    
    return 'Nh√¢n vi√™n';
  }

  viewSalaryDetails(salary: SalaryInfo): void {
    // T√¨m th√¥ng tin nh√¢n vi√™n t·ª´ danh s√°ch ƒë√£ l·∫•y ƒë∆∞·ª£c
    const employeeInfo = this.employeeList.find(e => e.employeeID === salary.employeeId);
    const departmentName = this.getDepartmentName(salary.employeeId);
    
    // T·∫°o ƒë·ªëi t∆∞·ª£ng ƒë·∫ßy ƒë·ªß th√¥ng tin ƒë·ªÉ hi·ªÉn th·ªã trong modal chi ti·∫øt
    const completeData = {
      ...salary,
      code: salary.employeeId,
      name: this.getEmployeeName(salary.employeeId),
      department: departmentName,
      position: this.getPosition(salary.employeeId),
      baseSalary: salary.salaryBase?.baseSalary || 0
    };
    
    const modalRef = this.modalService.open(SalaryDetailComponent, {
      size: 'lg',
      centered: true
    });
    
    // Truy·ªÅn ƒë·ªëi t∆∞·ª£ng ƒë·∫ßy ƒë·ªß v√†o modal
    modalRef.componentInstance.employee = completeData;
    
    // X·ª≠ l√Ω khi modal ƒë√≥ng v√† tr·∫£ v·ªÅ k·∫øt qu·∫£
    modalRef.result.then((result) => {
      console.log('‚úÖ Modal ƒë√£ ƒë∆∞·ª£c ƒë√≥ng v·ªõi k·∫øt qu·∫£:', result);
      // C√≥ th·ªÉ th·ª±c hi·ªán c√°c x·ª≠ l√Ω c·∫≠p nh·∫≠t UI ·ªü ƒë√¢y n·∫øu c·∫ßn
      this.loadEmployeeData(); // T·∫£i l·∫°i d·ªØ li·ªáu sau khi c·∫≠p nh·∫≠t
    }, (reason) => {
      console.log('‚ÑπÔ∏è Modal ƒë√£ b·ªã ƒë√≥ng v·ªõi l√Ω do:', reason);
    });
  }

  applyFilter(): void {
    this.loadEmployeeData();
  }

  onReset(): void {
    this.filterForm.reset({
      department: '',
      jobTitle: '',
      managerId: '',
      employeeId: ''
    });
    
    this.loadEmployeeData();
  }
} 